//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player Scripts/playerInputEditor.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputEditor: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputEditor()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerInputEditor"",
    ""maps"": [
        {
            ""name"": ""_playerMovement"",
            ""id"": ""31852344-a34f-40e8-b85c-bec3712fa4ea"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2bd91454-c756-4fb0-894f-b500cc402e6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""73aea451-8640-4a26-9399-dd513d8ee05f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5fd61336-d8d6-4f7d-8f03-0255148b5ba0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b0c8f977-115f-488e-96d9-7ff6b38c93ac"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cf42271e-c3a3-4c84-a3ea-e5da9dcc6aaf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""30b72e26-9807-4b98-8f41-4382aa092207"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // _playerMovement
        m__playerMovement = asset.FindActionMap("_playerMovement", throwIfNotFound: true);
        m__playerMovement_Move = m__playerMovement.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // _playerMovement
    private readonly InputActionMap m__playerMovement;
    private List<I_playerMovementActions> m__playerMovementActionsCallbackInterfaces = new List<I_playerMovementActions>();
    private readonly InputAction m__playerMovement_Move;
    public struct _playerMovementActions
    {
        private @PlayerInputEditor m_Wrapper;
        public _playerMovementActions(@PlayerInputEditor wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m__playerMovement_Move;
        public InputActionMap Get() { return m_Wrapper.m__playerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_playerMovementActions set) { return set.Get(); }
        public void AddCallbacks(I_playerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m__playerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__playerMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(I_playerMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(I_playerMovementActions instance)
        {
            if (m_Wrapper.m__playerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(I_playerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m__playerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__playerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public _playerMovementActions @_playerMovement => new _playerMovementActions(this);
    public interface I_playerMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
